"use client";

import React, { useState } from "react";
import Link from "next/link";

export default function Layer6TestingPage() {  const [activeTab, setActiveTab] = useState<  "overview" | "examples" | "performance" | "cli"  >("overview");  return (  <div className="docs-page">  <div className="docs-page-header">  <div className="docs-breadcrumb">  <Link href="/docs"> Docs</Link>  <span className="docs-breadcrumb-separator">→</span>  <Link href="/docs#layer-reference"> Layer Reference</Link>  <span className="docs-breadcrumb-separator">→</span>  <span className="docs-breadcrumb-current">  Layer 6: Testing & Validation  </span>  </div>  <h1 className="docs-page-title"> Layer 6: Testing & Validation</h1>  <p className="docs-page-subtitle">  Error boundaries, accessibility validation, testing setup, and final  quality improvements  </p>  <div className="docs-page-meta">  <span className="docs-meta-item"> 8 min read</span>  <span className="docs-meta-item difficulty-advanced">  Advanced  </span>  <span className="docs-meta-item layer-badge"> Quality Layer</span>  <span className="docs-meta-item"> Last updated: Dec 2024</span>  </div>  </div>  {/* Tab Navigation */}  <div className="docs-tab-nav">  <button  className={`docs-tab ${activeTab === "overview" ? "active" : ""}`}  onClick={() => setActiveTab("overview")}  >  Overview  </button>  <button  className={`docs-tab ${activeTab === "examples" ? "active" : ""}`}  onClick={() => setActiveTab("examples")}  >  Examples  </button>  <button  className={`docs-tab ${activeTab === "performance" ? "active" : ""}`}  onClick={() => setActiveTab("performance")}  >  Performance  </button>  <button  className={`docs-tab ${activeTab === "cli" ? "active" : ""}`}  onClick={() => setActiveTab("cli")}  >  CLI Usage  </button>  </div>  <div className="docs-page-content">  {/* Overview Tab */}  {activeTab === "overview" && (  <>  {/* Quick Summary */}  <div className="docs-highlight-box info">  <h3> Layer 6 Purpose</h3>  <p>  Layer 6 provides the <strong>final quality layer</strong> by  adding error boundaries, accessibility validation, testing  infrastructure, performance optimizations, and comprehensive  quality checks to ensure your codebase is production-ready.  </p>  </div>  {/* What It Fixes */}  <div className="docs-section">  <h2 id="what-it-fixes"> What Layer 6 Fixes</h2>  <div className="docs-fix-categories">  <div className="docs-fix-category">  <div className="docs-fix-icon"></div>  <h3>Error Boundaries</h3>  <ul>  <li>  <strong>Critical component protection:</strong> Wraps  risky components in error boundaries  </li>  <li>  <strong>Graceful error handling:</strong> Prevents entire  app crashes from component errors  </li>  <li>  <strong>Error reporting:</strong> Adds error logging and  reporting mechanisms  </li>  <li>  <strong>Fallback UI:</strong> Provides user-friendly error  messages  </li>  <li>  <strong>Recovery mechanisms:</strong> Implements error  recovery strategies  </li>  </ul>  </div>  <div className="docs-fix-category">  <div className="docs-fix-icon"></div>  <h3>Accessibility Validation</h3>  <ul>  <li>  <strong>ARIA compliance:</strong> Ensures proper ARIA  attributes  </li>  <li>  <strong>Keyboard navigation:</strong> Validates tab order  and focus management  </li>  <li>  <strong>Screen reader support:</strong> Adds semantic  markup for assistive technology  </li>  <li>  <strong>Color contrast:</strong> Validates color  accessibility standards  </li>  <li>  <strong>Alt text validation:</strong> Ensures all images  have descriptive alt text  </li>  </ul>  </div>  <div className="docs-fix-category">  <div className="docs-fix-icon"></div>  <h3>Testing Infrastructure</h3>  <ul>  <li>  <strong>Test file creation:</strong> Generates basic test  structures  </li>  <li>  <strong>Component testing:</strong> Adds unit tests for  critical components  </li>  <li>  <strong>Integration testing:</strong> Sets up integration  test patterns  </li>  <li>  <strong>Accessibility testing:</strong> Automated a11y  test integration  </li>  <li>  <strong>Performance testing:</strong> Adds performance  monitoring  </li>  </ul>  </div>  <div className="docs-fix-category">  <div className="docs-fix-icon"></div>  <h3>Performance Optimization</h3>  <ul>  <li>  <strong>React.memo optimization:</strong> Adds memoization  to pure components  </li>  <li>  <strong>Code splitting:</strong> Implements dynamic  imports where beneficial  </li>  <li>  <strong>Bundle analysis:</strong> Identifies optimization  opportunities  </li>  <li>  <strong>Memory leak detection:</strong> Finds and fixes  potential memory leaks  </li>  <li>  <strong>Render optimization:</strong> Optimizes component  re-rendering  </li>  </ul>  </div>  </div>  </div>  {/* Quality Checks */}  <div className="docs-section">  <h2 id="quality-checks"> Comprehensive Quality Checks</h2>  <div className="docs-quality-checks">  <div className="docs-quality-item">  <h4> Code Quality</h4>  <ul>  <li>TypeScript interface completeness</li>  <li>Prop validation and documentation</li>  <li>Component composition patterns</li>  <li>Performance anti-patterns detection</li>  </ul>  </div>  <div className="docs-quality-item">  <h4> Error Handling</h4>  <ul>  <li>Unhandled promise rejection detection</li>  <li>Error boundary coverage analysis</li>  <li>Graceful degradation patterns</li>  <li>Error reporting completeness</li>  </ul>  </div>  <div className="docs-quality-item">  <h4> Accessibility Audit</h4>  <ul>  <li>WCAG 2.1 compliance checking</li>  <li>Semantic HTML validation</li>  <li>Focus management verification</li>  <li>Screen reader compatibility</li>  </ul>  </div>  <div className="docs-quality-item">  <h4> Performance Audit</h4>  <ul>  <li>Bundle size optimization</li>  <li>Render performance analysis</li>  <li>Memory usage patterns</li>  <li>Core Web Vitals optimization</li>  </ul>  </div>  </div>  </div>  {/* Detection Strategy */}  <div className="docs-section">  <h2 id="detection-strategy"> How Layer 6 Detects Issues</h2>  <div className="docs-detection-flow">  <div className="docs-detection-step">  <div className="docs-step-number">1</div>  <div className="docs-step-content">  <h4> Deep AST Analysis</h4>  <p>  Comprehensive code analysis to identify components needing  error boundaries  </p>  </div>  </div>  <div className="docs-detection-step">  <div className="docs-step-number">2</div>  <div className="docs-step-content">  <h4> Accessibility Scanning</h4>  <p>  Automated accessibility auditing using industry-standard  rules and patterns  </p>  </div>  </div>  <div className="docs-detection-step">  <div className="docs-step-number">3</div>  <div className="docs-step-content">  <h4> Performance Profiling</h4>  <p>  Runtime performance analysis and optimization opportunity  identification  </p>  </div>  </div>  <div className="docs-detection-step">  <div className="docs-step-number">4</div>  <div className="docs-step-content">  <h4> Quality Enhancement</h4>  <p>  Application of comprehensive quality improvements and  safety measures  </p>  </div>  </div>  </div>  </div>  {/* Why It's Important */}  <div className="docs-section">  <h2 id="why-important"> Why Layer 6 is Critical</h2>  <div className="docs-importance-grid">  <div className="docs-importance-item">  <h4> Production Readiness</h4>  <p>  Ensures your application can handle real-world usage with  proper error handling.  </p>  </div>  <div className="docs-importance-item">  <h4> Accessibility Compliance</h4>  <p>  Meets legal requirements and provides inclusive user  experience for all users.  </p>  </div>  <div className="docs-importance-item">  <h4> Performance Excellence</h4>  <p>  Optimizes for Core Web Vitals and provides smooth user  experience.  </p>  </div>  <div className="docs-importance-item">  <h4> Testing Foundation</h4>  <p>  Establishes comprehensive testing infrastructure for  long-term maintainability.  </p>  </div>  </div>  </div>  {/* Safety Features */}  <div className="docs-section">  <h2 id="safety-features"> Safety Features</h2>  <div className="docs-safety-grid">  <div className="docs-safety-feature">  <h4> Targeted Enhancement</h4>  <p>  Only adds error boundaries and optimizations where they  provide real value.  </p>  </div>  <div className="docs-safety-feature">  <h4> Non-Breaking Changes</h4>  <p>  All improvements are additive and don't break existing  functionality.  </p>  </div>  <div className="docs-safety-feature">  <h4> Conservative Optimization</h4>  <p>  Performance optimizations are applied conservatively to  avoid regressions.  </p>  </div>  <div className="docs-safety-feature">  <h4> Graceful Enhancement</h4>  <p>  Quality improvements enhance the user experience without  disrupting workflows.  </p>  </div>  </div>  </div>  {/* Known Limitations */}  <div className="docs-section">  <h2 id="limitations"> Known Limitations</h2>  <div className="docs-highlight-box warning">  <h3> Current Limitations</h3>  <ul>  <li>  <strong>Complex async patterns:</strong> Very complex async  operations may need manual error handling  </li>  <li>  <strong>Third-party components:</strong> External component  testing may require manual setup  </li>  <li>  <strong>Advanced accessibility:</strong> Complex  accessibility patterns may need expert review  </li>  <li>  <strong>Performance edge cases:</strong> Highly specialized  performance optimizations may need custom implementation  </li>  </ul>  </div>  </div>  </>  )}  {/* Examples Tab */}  {activeTab === "examples" && (  <>  <div className="docs-section">  <h2> Before & After Examples</h2>  <div className="docs-example-group">  <h3> Error Boundary Implementation</h3>  <div className="docs-code-comparison">  <div className="docs-code-before">  <h4> Before (No Error Handling)</h4>  <pre>  <code>{`// Component that could crash the app
function UserProfile({ userId }) {  const [user, setUser] = useState(null);  useEffect(() => {  fetchUser(userId).then(setUser);  }, [userId]);  // This could throw if user.profile is undefined  return (  <div>  <h1>{user.name}</h1>  <img src={user.profile.avatar} alt="Avatar" />  <p>Email: {user.profile.email}</p>  <p>Joined: {new Date(user.profile.joinDate).toLocaleDateString()}</p>  </div>  );
}

// Usage without protection
function App() {  return (  <div>  <UserProfile userId="123" />  </div>  );
}`}</code>  </pre>  </div>  <div className="docs-code-after">  <h4> After (With Error Boundary)</h4>  <pre>  <code>{`// Error boundary component
class ErrorBoundary extends Component {  constructor(props) {  super(props);  this.state = { hasError: false, error: null };  }  static getDerivedStateFromError(error) {  return { hasError: true, error };  }  componentDidCatch(error, errorInfo) {  console.error('Error caught by boundary:', error, errorInfo);  // Report to error tracking service  }  render() {  if (this.state.hasError) {  return (  <div className="error-fallback">  <h2>Something went wrong</h2>  <p>We're sorry, but something unexpected happened.</p>  <button onClick={() => this.setState({ hasError: false })}>  Try again  </button>  </div>  );  }  return this.props.children;  }
}

// Protected component with defensive coding
function UserProfile({ userId }) {  const [user, setUser] = useState(null);  const [loading, setLoading] = useState(true);  const [error, setError] = useState(null);  useEffect(() => {  fetchUser(userId)  .then(setUser)  .catch(setError)  .finally(() => setLoading(false));  }, [userId]);  if (loading) return <div>Loading...</div>;  if (error) return <div>Error loading user: {error.message}</div>;  if (!user) return <div>User not found</div>;  return (  <div>  <h1>{user.name || 'Unknown User'}</h1>  {user.profile?.avatar && (  <img src={user.profile.avatar} alt={\`\${user.name}'s avatar\`} />  )}  <p>Email: {user.profile?.email || 'Not provided'}</p>  {user.profile?.joinDate && (  <p>Joined: {new Date(user.profile.joinDate).toLocaleDateString()}</p>  )}  </div>  );
}

// Usage with error boundary protection
function App() {  return (  <div>  <ErrorBoundary>  <UserProfile userId="123" />  </ErrorBoundary>  </div>  );
}`}</code>  </pre>  </div>  </div>  <div className="docs-changes-summary">  <h4> Changes Made:</h4>  <ul>  <li> Added comprehensive ErrorBoundary component</li>  <li> Implemented defensive coding in UserProfile</li>  <li> Added proper loading and error states</li>  <li> Protected against undefined/null values</li>  <li> Added error reporting and recovery mechanisms</li>  </ul>  </div>  </div>  <div className="docs-example-group">  <h3> Accessibility Improvements</h3>  <div className="docs-code-comparison">  <div className="docs-code-before">  <h4> Before (Accessibility Issues)</h4>  <pre>  <code>{`// Form with accessibility problems
function ContactForm() {  const [formData, setFormData] = useState({  name: '', email: '', message: ''  });  return (  <form>  <div>  <label>Name</label>  <input  type="text"  value={formData.name}  onChange={(e) => setFormData({...formData, name: e.target.value})}  />  </div>  <div>  <label>Email</label>  <input  type="email"  value={formData.email}  onChange={(e) => setFormData({...formData, email: e.target.value})}  />  </div>  <div>  <label>Message</label>  <textarea  value={formData.message}  onChange={(e) => setFormData({...formData, message: e.target.value})}  />  </div>  <button type="submit">Send</button>  </form>  );
}`}</code>  </pre>  </div>  <div className="docs-code-after">  <h4> After (Accessible)</h4>  <pre>  <code>{`// Fully accessible form
function ContactForm() {  const [formData, setFormData] = useState({  name: '', email: '', message: ''  });  const [errors, setErrors] = useState({});  const [isSubmitting, setIsSubmitting] = useState(false);  const validateField = (name, value) => {  const newErrors = { ...errors };  switch (name) {  case 'name':  if (!value.trim()) {  newErrors.name = 'Name is required';  } else {  delete newErrors.name;  }  break;  case 'email':  if (!value.includes('@')) {  newErrors.email = 'Please enter a valid email';  } else {  delete newErrors.email;  }  break;  case 'message':  if (value.length < 10) {  newErrors.message = 'Message must be at least 10 characters';  } else {  delete newErrors.message;  }  break;  }  setErrors(newErrors);  };  return (  <form role="form" aria-labelledby="contact-form-title">  <h2 id="contact-form-title">Contact Us</h2>  <div className="form-group">  <label htmlFor="name-input">  Name *  </label>  <input  id="name-input"  type="text"  value={formData.name}  onChange={(e) => {  setFormData({...formData, name: e.target.value});  validateField('name', e.target.value);  }}  aria-required="true"  aria-invalid={errors.name ? 'true' : 'false'}  aria-describedby={errors.name ? 'name-error' : undefined}  />  {errors.name && (  <div id="name-error" role="alert" className="error-message">  {errors.name}  </div>  )}  </div>  <div className="form-group">  <label htmlFor="email-input">  Email Address *  </label>  <input  id="email-input"  type="email"  value={formData.email}  onChange={(e) => {  setFormData({...formData, email: e.target.value});  validateField('email', e.target.value);  }}  aria-required="true"  aria-invalid={errors.email ? 'true' : 'false'}  aria-describedby={errors.email ? 'email-error' : undefined}  />  {errors.email && (  <div id="email-error" role="alert" className="error-message">  {errors.email}  </div>  )}  </div>  <div className="form-group">  <label htmlFor="message-input">  Message *  </label>  <textarea  id="message-input"  value={formData.message}  onChange={(e) => {  setFormData({...formData, message: e.target.value});  validateField('message', e.target.value);  }}  aria-required="true"  aria-invalid={errors.message ? 'true' : 'false'}  aria-describedby="message-help"  rows={4}  />  <div id="message-help" className="help-text">  Please provide at least 10 characters  </div>  {errors.message && (  <div id="message-error" role="alert" className="error-message">  {errors.message}  </div>  )}  </div>  <button  type="submit"  disabled={isSubmitting || Object.keys(errors).length > 0}  aria-describedby="submit-help"  >  {isSubmitting ? 'Sending...' : 'Send Message'}  </button>  <div id="submit-help" className="help-text">  All fields marked with * are required  </div>  </form>  );
}`}</code>  </pre>  </div>  </div>  <div className="docs-changes-summary">  <h4> Changes Made:</h4>  <ul>  <li>  Added proper htmlFor/id associations for all labels  </li>  <li>  Implemented ARIA attributes (aria-required,  aria-invalid, aria-describedby)  </li>  <li> Added role="alert" for error announcements</li>  <li>  Provided descriptive help text and error messages  </li>  <li>  Added proper form validation with accessibility  feedback  </li>  </ul>  </div>  </div>  </div>  </>  )}  {/* Performance Tab */}  {activeTab === "performance" && (  <>  <div className="docs-section">  <h2> Performance Impact</h2>  <div className="docs-performance-stats">  <div className="docs-performance-metric">  <div className="docs-metric-value">5-20s</div>  <div className="docs-metric-label">Execution Time</div>  <div className="docs-metric-description">  Testing & validation  </div>  </div>  <div className="docs-performance-metric">  <div className="docs-metric-value">+15</div>  <div className="docs-metric-label">Accessibility Score</div>  <div className="docs-metric-description">  Average improvement  </div>  </div>  <div className="docs-performance-metric">  <div className="docs-metric-value">~10-25%</div>  <div className="docs-metric-label">Error Reduction</div>  <div className="docs-metric-description">  Runtime stability  </div>  </div>  </div>  <div className="docs-performance-details">  <h3> Detailed Performance Analysis</h3>  <div className="docs-performance-section">  <h4> Error Handling Impact</h4>  <ul>  <li>  <strong>Crash prevention:</strong> Error boundaries  prevent entire app crashes  </li>  <li>  <strong>User experience:</strong> Graceful error handling  improves user satisfaction  </li>  <li>  <strong>Debug efficiency:</strong> Better error reporting  speeds up development  </li>  <li>  <strong>Production stability:</strong> Reduces support  tickets and bug reports  </li>  </ul>  </div>  <div className="docs-performance-section">  <h4> Accessibility Benefits</h4>  <ul>  <li>  <strong>Broader user base:</strong> Inclusive design  reaches more users  </li>  <li>  <strong>SEO improvements:</strong> Semantic HTML improves  search rankings  </li>  <li>  <strong>Legal compliance:</strong> Meets accessibility  regulations and standards  </li>  <li>  <strong>Better UX for all:</strong> Accessibility  improvements benefit everyone  </li>  </ul>  </div>  <div className="docs-performance-section">  <h4> Testing Infrastructure</h4>  <ul>  <li>  <strong>Bug detection:</strong> Early detection of issues  reduces production bugs  </li>  <li>  <strong>Refactoring safety:</strong> Tests enable  confident code changes  </li>  <li>  <strong>Documentation value:</strong> Tests serve as  living documentation  </li>  <li>  <strong>Team velocity:</strong> Fewer bugs means faster  development cycles  </li>  </ul>  </div>  <div className="docs-performance-section">  <h4> Performance Optimizations</h4>  <ul>  <li>  <strong>React.memo benefits:</strong> Reduces unnecessary  re-renders  </li>  <li>  <strong>Code splitting:</strong> Smaller initial bundle  sizes  </li>  <li>  <strong>Memory optimization:</strong> Better memory  management patterns  </li>  <li>  <strong>Core Web Vitals:</strong> Improved LCP, FID, and  CLS scores  </li>  </ul>  </div>  </div>  </div>  </>  )}  {/* CLI Usage Tab */}  {activeTab === "cli" && (  <>  <div className="docs-section">  <h2> Command Line Usage</h2>  <div className="docs-cli-section">  <h3> Run Layer 6 Only</h3>  <div className="docs-cli-command">  <pre>  <code>npm run fix-layer-6</code>  </pre>  <p>Executes only the testing and validation layer</p>  </div>  </div>  <div className="docs-cli-section">  <h3> Preview Layer 6 Changes</h3>  <div className="docs-cli-command">  <pre>  <code>node fix-layer-6-testing.js --dry-run</code>  </pre>  <p>Shows what quality improvements would be made</p>  </div>  </div>  <div className="docs-cli-section">  <h3> Verbose Output</h3>  <div className="docs-cli-command">  <pre>  <code>node fix-layer-6-testing.js --verbose</code>  </pre>  <p>  Provides detailed information about each quality enhancement  </p>  </div>  </div>  <div className="docs-cli-section">  <h3> Advanced Options</h3>  <div className="docs-cli-options">  <div className="docs-cli-option">  <code>--skip-error-boundaries</code>  <p>Skip error boundary creation</p>  </div>  <div className="docs-cli-option">  <code>--skip-accessibility</code>  <p>Skip accessibility improvements</p>  </div>  <div className="docs-cli-option">  <code>--skip-testing</code>  <p>Skip test file generation</p>  </div>  <div className="docs-cli-option">  <code>--skip-performance</code>  <p>Skip performance optimizations</p>  </div>  <div className="docs-cli-option">  <code>--accessibility-level</code>  <p>Set accessibility compliance level (A, AA, AAA)</p>  </div>  </div>  </div>  <div className="docs-cli-section">  <h3> Example Output</h3>  <div className="docs-cli-output">  <pre>  <code>{` NeuroLint Pro - Layer 6: Testing & Validation  Scanning for quality improvement opportunities...
 Found 31 components for error boundary analysis
 Found 18 accessibility issues to fix  Analyzing quality patterns...  8 components need error boundary protection  18 accessibility violations detected  12 components missing performance optimizations  6 components need test coverage  Applying quality improvements...
 Added error boundaries to 8 critical components
 Fixed 18 accessibility violations
 Added React.memo to 12 pure components
 Generated test files for 6 components
 Added performance monitoring hooks
 Implemented comprehensive error reporting  Summary:  • 8 error boundaries added (crash protection)  • 18 accessibility issues fixed (WCAG AA compliance)  • 12 components optimized (reduced re-renders)  • 6 test files generated (testing foundation)  • 100% error boundary coverage achieved  • 0 critical accessibility violations remaining  Layer 6 completed successfully!  Quality score: 95/100  Accessibility score: +18 points  Error resilience: 100% (no single points of failure)  Test coverage: 85% (critical components covered)`}</code>  </pre>  </div>  </div>  </div>  </>  )}  </div>  {/* Page Navigation */}  <div className="docs-page-nav">  <div className="docs-page-nav-item">  <Link  href="/docs/layer-reference/layer-5-nextjs"  className="docs-nav-link prev"  >  ← Layer 5: Next.js App Router  </Link>  </div>  <div className="docs-page-nav-item">  <Link  href="/docs/layer-reference/master-orchestration"  className="docs-nav-link next"  >  Master Orchestration →  </Link>  </div>  </div>  <style jsx>{`  .docs-page {  min-height: 100vh;  background: #000000;  color: white;  font-family: var(--font-sans, "Inter", sans-serif);  }  .docs-page-header {  background: linear-gradient(  135deg,  rgba(33, 150, 243, 0.08) 0%,  rgba(0, 0, 0, 0.95) 100%  );  border-bottom: 1px solid rgba(255, 255, 255, 0.1);  padding: 40px;  }  .docs-breadcrumb {  display: flex;  align-items: center;  gap: 8px;  margin-bottom: 20px;  font-size: 14px;  }  .docs-breadcrumb a {  color: var(--status-info);  text-decoration: none;  }  .docs-breadcrumb a:hover {  text-decoration: underline;  }  .docs-breadcrumb-separator {  color: rgba(255, 255, 255, 0.4);  }  .docs-breadcrumb-current {  color: rgba(255, 255, 255, 0.8);  }  .docs-page-title {  font-size: 48px;  font-weight: 700;  margin: 0 0 16px 0;  background: linear-gradient(135deg, #ffffff 0%, #2196f3 100%);  -webkit-background-clip: text;  -webkit-text-fill-color: transparent;  background-clip: text;  }  .docs-page-subtitle {  font-size: 20px;  color: rgba(255, 255, 255, 0.7);  margin: 0 0 24px 0;  line-height: 1.5;  }  .docs-page-meta {  display: flex;  gap: 16px;  flex-wrap: wrap;  }  .docs-meta-item {  padding: 6px 12px;  background: rgba(255, 255, 255, 0.05);  border: 1px solid rgba(255, 255, 255, 0.1);  border-radius: 6px;  font-size: 13px;  font-weight: 500;  }  .difficulty-advanced {  color: var(--status-error);  border-color: rgba(229, 62, 62, 0.3);  background: rgba(229, 62, 62, 0.1);  }  .layer-badge {  color: var(--status-active);  border-color: rgba(76, 175, 80, 0.3);  background: rgba(76, 175, 80, 0.1);  }  .docs-tab-nav {  background: rgba(255, 255, 255, 0.02);  border-bottom: 1px solid rgba(255, 255, 255, 0.1);  padding: 0 40px;  display: flex;  gap: 8px;  }  .docs-tab {  padding: 16px 24px;  background: none;  border: none;  color: rgba(255, 255, 255, 0.6);  cursor: pointer;  font-size: 14px;  font-weight: 500;  border-bottom: 2px solid transparent;  transition: all 0.2s ease;  }  .docs-tab:hover {  color: rgba(255, 255, 255, 0.8);  background: rgba(255, 255, 255, 0.05);  }  .docs-tab.active {  color: var(--status-info);  border-bottom-color: var(--status-info);  background: rgba(33, 150, 243, 0.1);  }  .docs-page-content {  max-width: 1000px;  margin: 0 auto;  padding: 60px 40px;  line-height: 1.7;  }  .docs-section {  margin-bottom: 60px;  }  .docs-section h2 {  font-size: 32px;  font-weight: 700;  margin: 0 0 24px 0;  color: white;  }  .docs-section h3 {  font-size: 24px;  font-weight: 600;  margin: 32px 0 16px 0;  color: white;  }  .docs-section h4 {  font-size: 18px;  font-weight: 600;  margin: 24px 0 12px 0;  color: white;  }  .docs-section p {  margin-bottom: 16px;  color: rgba(255, 255, 255, 0.8);  }  .docs-highlight-box {  padding: 24px;  border-radius: 12px;  margin: 32px 0;  border: 1px solid;  }  .docs-highlight-box.info {  background: rgba(33, 150, 243, 0.1);  border-color: rgba(33, 150, 243, 0.3);  }  .docs-highlight-box.warning {  background: rgba(255, 152, 0, 0.1);  border-color: rgba(255, 152, 0, 0.3);  }  .docs-highlight-box h3 {  margin: 0 0 12px 0;  font-size: 18px;  }  .docs-highlight-box p {  margin: 0;  }  .docs-highlight-box ul {  margin: 12px 0 0 0;  padding-left: 20px;  }  .docs-highlight-box li {  margin-bottom: 8px;  }  .docs-fix-categories {  display: grid;  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));  gap: 24px;  margin: 32px 0;  }  .docs-fix-category {  padding: 24px;  background: rgba(255, 255, 255, 0.05);  border: 1px solid rgba(255, 255, 255, 0.1);  border-radius: 12px;  }  .docs-fix-icon {  font-size: 32px;  margin-bottom: 16px;  }  .docs-fix-category h3 {  margin: 0 0 16px 0;  font-size: 20px;  }  .docs-fix-category ul {  margin: 0;  padding-left: 20px;  }  .docs-fix-category li {  margin-bottom: 8px;  color: rgba(255, 255, 255, 0.8);  }  .docs-quality-checks {  display: grid;  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));  gap: 20px;  margin: 32px 0;  }  .docs-quality-item {  padding: 20px;  background: rgba(255, 255, 255, 0.03);  border: 1px solid rgba(255, 255, 255, 0.08);  border-radius: 12px;  }  .docs-quality-item h4 {  margin: 0 0 12px 0;  font-size: 16px;  }  .docs-quality-item ul {  margin: 0;  padding-left: 20px;  }  .docs-quality-item li {  margin-bottom: 6px;  font-size: 14px;  color: rgba(255, 255, 255, 0.8);  }  .docs-detection-flow {  margin: 32px 0;  }  .docs-detection-step {  display: flex;  align-items: flex-start;  gap: 20px;  padding: 20px;  background: rgba(255, 255, 255, 0.03);  border: 1px solid rgba(255, 255, 255, 0.08);  border-radius: 12px;  margin-bottom: 16px;  }  .docs-step-number {  width: 32px;  height: 32px;  background: var(--status-active);  color: #000;  border-radius: 50%;  display: flex;  align-items: center;  justify-content: center;  font-weight: 700;  flex-shrink: 0;  }  .docs-step-content h4 {  margin: 0 0 4px 0;  font-size: 16px;  }  .docs-step-content p {  margin: 0;  font-size: 14px;  color: rgba(255, 255, 255, 0.7);  }  .docs-importance-grid {  display: grid;  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));  gap: 20px;  margin: 32px 0;  }  .docs-importance-item {  padding: 20px;  background: rgba(255, 255, 255, 0.03);  border: 1px solid rgba(255, 255, 255, 0.08);  border-radius: 12px;  }  .docs-importance-item h4 {  margin: 0 0 8px 0;  font-size: 16px;  }  .docs-importance-item p {  margin: 0;  font-size: 14px;  color: rgba(255, 255, 255, 0.7);  }  .docs-safety-grid {  display: grid;  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));  gap: 20px;  margin: 32px 0;  }  .docs-safety-feature {  padding: 20px;  background: rgba(255, 255, 255, 0.03);  border: 1px solid rgba(255, 255, 255, 0.08);  border-radius: 12px;  }  .docs-safety-feature h4 {  margin: 0 0 8px 0;  font-size: 16px;  }  .docs-safety-feature p {  margin: 0;  font-size: 14px;  color: rgba(255, 255, 255, 0.7);  }  .docs-example-group {  margin: 40px 0;  padding: 32px;  background: rgba(255, 255, 255, 0.02);  border: 1px solid rgba(255, 255, 255, 0.05);  border-radius: 16px;  }  .docs-example-group h3 {  margin: 0 0 24px 0;  font-size: 22px;  }  .docs-code-comparison {  display: grid;  grid-template-columns: 1fr 1fr;  gap: 24px;  margin: 24px 0;  }  .docs-code-before,  .docs-code-after {  background: rgba(0, 0, 0, 0.4);  border: 1px solid rgba(255, 255, 255, 0.1);  border-radius: 12px;  overflow: hidden;  }  .docs-code-before h4 {  background: rgba(229, 62, 62, 0.2);  color: #ff6b6b;  margin: 0;  padding: 12px 16px;  font-size: 14px;  border-bottom: 1px solid rgba(255, 255, 255, 0.1);  }  .docs-code-after h4 {  background: rgba(76, 175, 80, 0.2);  color: #4caf50;  margin: 0;  padding: 12px 16px;  font-size: 14px;  border-bottom: 1px solid rgba(255, 255, 255, 0.1);  }  .docs-code-before pre,  .docs-code-after pre {  margin: 0;  padding: 16px;  overflow-x: auto;  }  .docs-code-before code,  .docs-code-after code {  font-family: "Monaco", "Menlo", monospace;  font-size: 13px;  line-height: 1.5;  color: rgba(255, 255, 255, 0.9);  }  .docs-changes-summary {  background: rgba(33, 150, 243, 0.1);  border: 1px solid rgba(33, 150, 243, 0.3);  border-radius: 12px;  padding: 20px;  margin-top: 20px;  }  .docs-changes-summary h4 {  margin: 0 0 12px 0;  color: var(--status-info);  }  .docs-changes-summary ul {  margin: 0;  padding-left: 20px;  }  .docs-changes-summary li {  margin-bottom: 6px;  font-size: 14px;  }  .docs-performance-stats {  display: grid;  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));  gap: 24px;  margin: 32px 0;  }  .docs-performance-metric {  text-align: center;  padding: 24px;  background: rgba(255, 255, 255, 0.05);  border: 1px solid rgba(255, 255, 255, 0.1);  border-radius: 12px;  }  .docs-metric-value {  font-size: 36px;  font-weight: 700;  color: var(--status-active);  margin-bottom: 8px;  }  .docs-metric-label {  font-size: 16px;  font-weight: 600;  margin-bottom: 4px;  }  .docs-metric-description {  font-size: 12px;  color: rgba(255, 255, 255, 0.6);  }  .docs-performance-details {  margin: 40px 0;  }  .docs-performance-section {  margin: 24px 0;  padding: 20px;  background: rgba(255, 255, 255, 0.03);  border: 1px solid rgba(255, 255, 255, 0.08);  border-radius: 12px;  }  .docs-performance-section h4 {  margin: 0 0 12px 0;  }  .docs-performance-section ul {  margin: 0;  padding-left: 20px;  }  .docs-performance-section li {  margin-bottom: 8px;  font-size: 14px;  }  .docs-cli-section {  margin: 32px 0;  }  .docs-cli-section h3 {  margin: 0 0 16px 0;  font-size: 20px;  }  .docs-cli-command {  background: rgba(0, 0, 0, 0.4);  border: 1px solid rgba(255, 255, 255, 0.1);  border-radius: 8px;  padding: 16px;  margin-bottom: 12px;  }  .docs-cli-command pre {  margin: 0 0 8px 0;  }  .docs-cli-command code {  font-family: "Monaco", "Menlo", monospace;  font-size: 14px;  color: var(--status-active);  }  .docs-cli-command p {  margin: 0;  font-size: 14px;  color: rgba(255, 255, 255, 0.7);  }  .docs-cli-options {  display: grid;  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));  gap: 16px;  margin: 20px 0;  }  .docs-cli-option {  padding: 16px;  background: rgba(255, 255, 255, 0.03);  border: 1px solid rgba(255, 255, 255, 0.08);  border-radius: 8px;  }  .docs-cli-option code {  color: var(--status-info);  font-weight: 600;  font-size: 14px;  }  .docs-cli-option p {  margin: 8px 0 0 0;  font-size: 13px;  color: rgba(255, 255, 255, 0.7);  }  .docs-cli-output {  background: rgba(0, 0, 0, 0.6);  border: 1px solid rgba(255, 255, 255, 0.1);  border-radius: 12px;  padding: 20px;  margin: 20px 0;  }  .docs-cli-output pre {  margin: 0;  overflow-x: auto;  }  .docs-cli-output code {  font-family: "Monaco", "Menlo", monospace;  font-size: 13px;  line-height: 1.6;  color: rgba(255, 255, 255, 0.9);  }  .docs-page-nav {  background: rgba(255, 255, 255, 0.02);  border-top: 1px solid rgba(255, 255, 255, 0.1);  padding: 40px;  display: flex;  justify-content: space-between;  }  .docs-nav-link {  padding: 12px 24px;  background: rgba(255, 255, 255, 0.05);  border: 1px solid rgba(255, 255, 255, 0.1);  border-radius: 8px;  text-decoration: none;  color: white;  font-weight: 500;  transition: all 0.2s ease;  }  .docs-nav-link:hover {  background: rgba(255, 255, 255, 0.1);  border-color: rgba(255, 255, 255, 0.2);  }  code {  background: rgba(255, 255, 255, 0.1);  padding: 2px 6px;  border-radius: 4px;  font-family: "Monaco", "Menlo", monospace;  font-size: 0.9em;  }  strong {  color: white;  font-weight: 600;  }  @media (max-width: 768px) {  .docs-page-header,  .docs-page-content,  .docs-page-nav {  padding-left: 20px;  padding-right: 20px;  }  .docs-tab-nav {  padding-left: 20px;  padding-right: 20px;  overflow-x: auto;  }  .docs-page-title {  font-size: 36px;  }  .docs-code-comparison {  grid-template-columns: 1fr;  }  .docs-page-nav {  flex-direction: column;  gap: 12px;  }  }  `}</style>  </div>  );
}
